{{#section "css"}}
<link href="https://cdn.jsdelivr.net/npm/@yaireo/tagify@4.9.3/dist/tagify.css" rel="stylesheet">
<link rel="stylesheet" href="/static/css/cssWriter/writer.css">
<link href="https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.5.0/css/fileinput.min.css" media="all"
    rel="stylesheet" type="text/css" />
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.3/css/all.css" crossorigin="anonymous">
{{/section}}
{{#section "script"}}
<script src="https://cdn.tiny.cloud/1/phvhvcvzrs6bon8nebxuyvig5ln78s4n2mtlz4eodyg21gj5/tinymce/7/tinymce.min.js"
    referrerpolicy="origin"></script>
<script src="https://cdn.jsdelivr.net/npm/@yaireo/tagify@4.9.3/dist/tagify.min.js"></script>

<script>
    // Khởi tạo TinyMCE
    tinymce.init({
        selector: '#txtContent'
    });

    // Khởi tạo Tagify
    // Xử lý chọn danh mục con
    $(document).ready(function () {
        $('#txtCat').on('change', function () {
            var categoryId = $(this).val(); // Lấy ID của category cha

            if (categoryId) {
                // Gửi yêu cầu AJAX
                $.get('/writer/categories/children/' + categoryId, function (data) {
                    var childSelect = $('#txtCatChild');
                    childSelect.empty(); // Xóa các option cũ

                    // Thêm option mặc định
                    childSelect.append('<option value="" disabled selected>Select a category child</option>');

                    // Thêm các category con vào dropdown
                    if (data.length > 0) {
                        data.forEach(function (child) {
                            childSelect.append('<option value="' + child.CatID + '">' + child.CatName + '</option>');
                        });
                        childSelect.prop('disabled', false); // Kích hoạt dropdown
                    } else {
                        childSelect.prop('disabled', true); // Vô hiệu hóa nếu không có category con
                    }
                }).fail(function () {
                    alert('Failed to load category children.');
                });
            } else {
                $('#txtCatChild').prop('disabled', true); // Vô hiệu hóa nếu không chọn category cha
            }
        });
    });
</script>
<script>
    document.addEventListener('DOMContentLoaded', async function () {
        const existingTags = JSON.parse('{{{json tags}}}').map(tag => ({ value: tag.TagName }));
        console.log(existingTags);
        const input = document.querySelector('#txtTag');
        try {
            // Gọi API để lấy danh sách tags
            const response = await fetch('/newspaper/api/tags');
            if (!response.ok) throw new Error('Failed to fetch tags');
            const tags = await response.json(); // Danh sách tags từ API
            const tagifyTags = tags.map(tag => ({ value: tag.TagName }));
            // Kiểm tra xem dữ liệu tags có hợp lệ không
            const tagify = new Tagify(input, {
                whitelist: tagifyTags, // Sử dụng danh sách tags từ API
                maxTags: 5,
                placeholder: 'Add tags',
                dropdown: {
                    maxItems: 10, // Hiển thị tối đa 10 tag
                    enabled: 0, // Hiển thị dropdown ngay khi focus
                    closeOnSelect: true // Giữ dropdown mở sau khi chọn
                }
            });

            tagify.addTags(existingTags);
            tagify.on('add', async function (e) {
                console.log('Tag added:', e.detail.data);

                // Gửi tag mới lên server
                try {
                    const addedTag = e.detail.data.value; // Lấy giá trị tag mới
                    const response = await fetch('/newspaper/api/tags', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ tags: [addedTag] }) // Gửi mảng tags
                    });

                    if (!response.ok) throw new Error('Failed to save tag');
                    const result = await response.json();
                    console.log('Tag saved successfully:', result);
                } catch (error) {
                    console.error('Error saving tag:', error);
                }
            });

            // Xử lý sự kiện khi xóa tag
            tagify.on('remove', function (e) {
                console.log('Tag removed:', e.detail.data);
                // Nếu cần, bạn có thể thêm logic để xóa tag khỏi cơ sở dữ liệu
            });


        } catch (error) {
            console.error('Error initializing tags:', error);
        }
    });

</script>
<script>
    // Hiển thị hộp thoại xác nhận SweetAlert
    function confirmDelete(newsId) {
        Swal.fire({
            title: 'bạn có chắc chắn muốn xóa?',
            text: "Hành động này không thể hoàn tác!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Có, xóa nó!',
            cancelButtonText: 'Hủy bỏ'
        }).then((result) => {
            if (result.isConfirmed) {
                // Gửi request xóa nếu người dùng xác nhận
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/newspaper/del';
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'newsId';
                input.value = newsId;
                form.appendChild(input);
                document.body.appendChild(form);
                form.submit();
            }
        });
    }

    // Hiển thị thông báo sau khi xóa thành công
    window.onload = function () {
        const params = new URLSearchParams(window.location.search);
        const message = params.get('message');
        if (message === 'success') {
            Swal.fire({
                title: 'Sweetheart!',
                text: 'Xóa thành công!',
                icon: 'success',
                confirmButtonText: 'OK'
            });
        } else if (message === 'error') {
            Swal.fire({
                title: 'Sweetheart!',
                text: 'Đã xảy ra lỗi khi xóa!',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    };
</script>
<script src="https://cdn.jsdelivr.net/gh/kartik-v/bootstrap-fileinput@5.5.0/js/fileinput.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-fileinput/5.2.5/js/locales/vi.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-fileinput/5.2.5/themes/fa/theme.min.js"></script>
<script>
    const initialFilePreview = [];
    const imageFile = "{{imageFile}}".trim();
    if (imageFile) {
        // Đường dẫn file sẽ được đưa vào initialPreview
        initialFilePreview.push(imageFile);
    }
    $(document).ready(function () {
        $("#imageFile").fileinput({
            initialPreview: initialFilePreview,
            initialPreviewAsData: true,
            showUpload: false,
            dropZoneEnabled: false,
            maxFileCount: 1,
            allowedFileExtensions: ["jpg", "png", "gif"],
            overwriteInitial: true,
            theme: 'fa',
            language: 'vi',
        });
    });

</script>
{{/section}}


<form class="formCreate" action="/newspaper/patch" method="post" enctype="multipart/form-data">
    <div class="header-create">
        <h4>Cập nhật bài viết</h4>
        <hr>
    </div>
    <div class="form-group mb-3">
        <label for="txtNewsID">Mã bài báo</label>
        <input type="text" name="newsId" id="txtNewsID" class="form-control txt-input" readonly
            value="{{this.news.NewsID}}">
    </div>
    <div class="form-group mb-3">
        <label for="txtTitle">Title</label>
        <input type="text" name="title" id="txtTitle" class="form-control txt-input" value="{{this.news.Title}}">
    </div>

    <div class="form-group mb-3">
        <label for="txtAbstract">Tóm tắt</label>
        <input type="text" name="abstract" id="txtAbstract" class="form-control txt-input"
            value="{{this.news.Abstract}}">
    </div>
    <div>
        <div class="form-group mb-3">
            <label for="txtCat">Danh mục</label>
            <select name="CatID" id="txtCat" class="form-control txt-input" aria-describedby="helpId">
                <option value="{{this.categoryCha.CatID}}" disabled selected>{{this.categoryCha.CatName}}</option>
                {{#each categories}}
                <option value="{{CatID}}">{{CatName}}</option>
                {{/each}}
            </select>
        </div>
        <div class="form-group mb-3">
            <label for="txtCatChild">Danh mục con</label>
            <select name="category_child_id" id="txtCatChild" class="form-control txt-input">
                <option value="" disabled selected>{{this.categoryCon.CatName}}</option>
                <!-- Các option category child sẽ được thêm vào ở đây -->
            </select>
        </div>
    </div>
    <div class="form-group mb-3">
        <label for="txtTag" class="bg-white text-black font-semibold p-2.5 rounded ml-2 w-40">Tag</label>
        <input type="text" id="txtTag" name="tags" class="form-control txt-input" placeholder="{{this.tags}}">
    </div>
    <label for="fileInputContainer" class="flex items-center">
        Tải file
    </label>
    <input type="hidden" name="ImageCover" value="{{this.news.ImageCover}}">

    <div id="fileInputContainer" class="file-loading form-group flex items-center space-x-1 mb-3">
        <input type="file" id="imageFile" name="ImageFile" class="mb-4 p-2 border rounded text-black">
    </div>


    <div class="form-group mb-3">
        <label for="txtContent">Nội dung bài viết</label>
        <textarea id="txtContent" name="content">{{{this.news.Content}}}</textarea>
    </div>
    <div class="d-flex flex-row btn-footer">
        <button type="button" class="btn btn-danger" onclick="confirmDelete('{{this.news.NewsID}}')">
            Xóa
        </button>
        <button type="submit" class="btn btn-warning ">Cập nhật</button>
    </div>
</form>